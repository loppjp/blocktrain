# This experiment is intended to load quickly but potentially
# train slower because its dataloaders load examples from disk
# 
# This experiment was designed to be used with the interactive
# ipynb notebooks in the notebooks folder for initial training
# pipeline checkout

experiment:
  __module__: "trainblock.experiment"
  __class__: "experiment_factory"
  train_dataset:
    __args__: 
      - "/mnt/d/drone_data/training-data"
      - "../data/train_indicies.json"
    __module__: "trainblock.datasets.ir_dataset" 
    __class__: "ir_dataset_factory"
    child_spec:
      __module__: "trainblock.datasets.ir_folder_image_file_system_dataset"
      __class__: "FolderImageFileSystemDataset"
  eval_dataset:
    __args__: 
      - "/mnt/d/drone_data/training-data"
      - "../data/eval_indicies.json"
    __module__: "trainblock.datasets.ir_dataset" 
    __class__: "ir_dataset_factory"
    child_spec:
      __module__: "trainblock.datasets.ir_folder_image_file_system_dataset"
      __class__: "FolderImageFileSystemDataset"
  train_dataloader:
    __module__: "torch.utils.data"
    __class__: "DataLoader"
    batch_size: 2
  eval_dataloader:
    __module__: "torch.utils.data"
    __class__: "DataLoader"
    batch_size: 2
  trainer:
    __module__: "trainblock.trainer"
    __class__: "Trainer"
    training_input_parameters:
      num_epochs: 2
  callbacks: []
  model:
    __module__: "torchvision.models"
    __class__: "get_model"
    __args__: 
      - "retinanet_resnet50_fpn_v2"
    weights: DEFAULT
  optimizer:
    __module__: "trainblock.factories.optimizer_factory"
    __class__: "load_optimizer"
    optimizer_module: "torch.optim"
    optimizer_class: "Adam"
    lr: 0.001
  collator:
    __module__: "trainblock.collator"
    __class__: "Collator"